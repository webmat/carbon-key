#!/usr/bin/env ruby

SYNOPSIS = <<-SYN
TODO: a high level explanation of what this script does.
SYN

require 'optparse'

require 'eventmachine'
require 'logger'
require 'em-logger'

def main(options)
    puts "Listening on #{options[:bind]}:#{options[:port]}",
        "Upstream is #{options[:upstream_host]}:#{options[:upstream_port]}",
        "API Keys: #{options[:api_keys].join(' ')}",
        "Stop with Ctrl-C"

    stream = Logger.new(STDOUT)
    stream.level = options[:log_level]
    $logger = EM::Logger.new(stream)

    $upstream   = Upstream::UDP.new options[:upstream_host], options[:upstream_port]
    $validator  = Validator.new options[:api_keys]
    $stats      = Hash.new(0)

    EventMachine.run {
      Signal.trap("INT")  { EventMachine.stop; puts 'Aborted by signal INT' }
      Signal.trap("TERM") { EventMachine.stop; puts 'Aborted by signal TERM' }

      EventMachine.start_server options[:bind], options[:port], CarbonKey
    }
end

class Validator
  def initialize(keys)
    @regex = /^(#{ Array(keys).join('|') })\.(.*)/.freeze
  end

  def scan(message)
    message[@regex, 2]
  end
end

module Upstream
  class UDP
    def initialize(host, port)
      @socket = UDPSocket.new
      @host = host
      @port = port
    end

    def send(message)
      @socket.send(message, 0, @host, @port)
    end
  end
end

class Object
    def safe_inspect
        value = inspect
        if value.length > 100
            "#{value[0..99]}... (#{value.length} chars)\""
        else
            value
        end
    end
end

module CarbonKey
    include EM::P::LineProtocol

    def remote_address
        return @remote_address if @remote_address
        port, @remote_address = Socket.unpack_sockaddr_in(get_peername)
        @remote_address
    end

    def post_init
        $stats[:connections] += 1
        $logger.debug { "Connected: #{remote_address}" }
    end

    def receive_line line
        $stats[:lines_received] += 1

        if authorized_payload = $validator.scan(line)
            $stats[:authorized_payloads] += 1
            $logger.debug "Forwarding authorized payload from #{remote_address}: #{authorized_payload.safe_inspect}"

            $upstream.send authorized_payload

        else
            $stats[:unauthorized_payloads] += 1
            $logger.info "Dropping unauthorized payload from #{remote_address}: #{line.safe_inspect}"
        end
    end

    def unbind
        $stats[:disconnections] += 1
        $logger.debug { "Disconnected: #{remote_address}" }
    end
end

def parse_options!(argv)
    # defaults
    options = {
        :action         => :perform,
        :api_keys       => [],
        :bind           => '0.0.0.0',
        :port           => '2002',
        :upstream_host  => '0.0.0.0',
        :upstream_port  => '2003',
        :log_level      => Logger::INFO,
    }

    parser = OptionParser.new do |opts|
        opts.banner = [
            SYNOPSIS,
            "",
        ].join("\n")

        opts.separator "Options:"

        # TODO your script options

        # More examples at http://apidock.com/ruby/OptionParser

        opts.on("--port PORT", Integer, "Port to listen on. Defaults to #{options[:port]}") do |value|
          options[:port] = value
        end

        opts.on("--bind ADDR", "Bind address. Defaults to #{options[:bind]}") do |value|
          options[:bind] = value
        end

        opts.on("--key API_KEY", "A valid API key. Can be used multiple times. If none is provided API key is 'deadbeef.'") do |value|
          options[:api_keys] << value
        end

        opts.on("--upstream-port PORT", Integer, "Upstream carbon port. Defaults to #{options[:upstream_port]}") do |value|
          options[:upstream_port] = value
        end

        opts.on("--upstream-host HOST", "Upstream carbon host. Defaults to #{options[:upstream_host]}") do |value|
          options[:upstream_host] = value
        end

        opts.on("--log FILE", "Log to a file instead of stdout.") do |value|
          options[:log] = value
        end

        opts.on("--log-level LEVEL", "Log level. Default is info. Supports all of Ruby's Logger levels.") do |value|
          level_name = value.upcase
          if Logger.const_defined?(level_name) && Logger.const_get(level_name).is_a?(Integer)
            options[:log_level] = Logger.const_get(level_name)
          end
        end

        opts.on_tail("--debug", "Shorthand for --log-level=debug") do |value|
          options[:log_level] = Logger::DEBUG
        end

        opts.on_tail('-h', "--help", "Display help") do
          options[:action] = :help
        end

    end

    parser.parse!(argv)

    if :help == options[:action]
        puts parser.to_s
        exit
    end

    if [] == options[:api_keys]
        options[:api_keys] << 'deadbeef'
    end

    if Logger::DEBUG == options[:log_level]
        begin ; require 'pry' ; rescue LoadError ; end
    end

    options
end

main( parse_options!(ARGV) )
